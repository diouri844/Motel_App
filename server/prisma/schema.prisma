// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma/client" // Specify the output directory
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//
enum RoomStatus {
  Available
  Booked
}

enum RoomType {
  Single
  Double
  Suite
  Triple
  Quad
}

model Hotel {
  id          String        @id @default(uuid()) @map("_id") // MongoDB's ObjectId
  name        String
  location    String
  rooms       Room[]
  discount    Discount[]
  reservation Reservation[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Room {
  id        String     @id @default(uuid()) @map("_id")
  type      RoomType
  price     Float
  hotelId   String
  status    RoomStatus // Helps track availability
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Hotel     Hotel      @relation(fields: [hotelId], references: [id])
  Discount  Discount[]
}

model Guest {
  id          String        @id @default(uuid()) @map("_id")
  name        String
  email       String        @unique
  phone       String
  address     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Reservation Reservation[]
}

model Discount {
  id         String    @id @default(uuid()) @map("_id")
  hotelId    String
  roomId     String?
  code       String    @unique
  percentage Float
  validUntil DateTime?
  hotel      Hotel     @relation(fields: [hotelId], references: [id])
  room       Room?     @relation(fields: [roomId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([hotelId, code])
}

model Reservation {
  id               String   @id @default(uuid()) @map("_id")
  roomId           String
  checkIn          DateTime
  checkOut         DateTime
  guestId          String
  hotelId          String
  hotel            Hotel    @relation(fields: [hotelId], references: [id])
  guestInformation Guest    @relation(fields: [guestId], references: [id])
  discountCode     String?
  finalPrice       Float
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([roomId, guestId, checkIn, checkOut])
}
